/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AboutRouteImport } from './routes/about'
import { Route as SkillSectionRouteRouteImport } from './routes/SkillSection/route'
import { Route as ProjectSectionRouteRouteImport } from './routes/ProjectSection/route'
import { Route as ContactSectionRouteRouteImport } from './routes/ContactSection/route'
import { Route as AboutSectionRouteRouteImport } from './routes/AboutSection/route'
import { Route as IndexRouteImport } from './routes/index'

const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const SkillSectionRouteRoute = SkillSectionRouteRouteImport.update({
  id: '/SkillSection',
  path: '/SkillSection',
  getParentRoute: () => rootRouteImport,
} as any)
const ProjectSectionRouteRoute = ProjectSectionRouteRouteImport.update({
  id: '/ProjectSection',
  path: '/ProjectSection',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactSectionRouteRoute = ContactSectionRouteRouteImport.update({
  id: '/ContactSection',
  path: '/ContactSection',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutSectionRouteRoute = AboutSectionRouteRouteImport.update({
  id: '/AboutSection',
  path: '/AboutSection',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/AboutSection': typeof AboutSectionRouteRoute
  '/ContactSection': typeof ContactSectionRouteRoute
  '/ProjectSection': typeof ProjectSectionRouteRoute
  '/SkillSection': typeof SkillSectionRouteRoute
  '/about': typeof AboutRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/AboutSection': typeof AboutSectionRouteRoute
  '/ContactSection': typeof ContactSectionRouteRoute
  '/ProjectSection': typeof ProjectSectionRouteRoute
  '/SkillSection': typeof SkillSectionRouteRoute
  '/about': typeof AboutRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/AboutSection': typeof AboutSectionRouteRoute
  '/ContactSection': typeof ContactSectionRouteRoute
  '/ProjectSection': typeof ProjectSectionRouteRoute
  '/SkillSection': typeof SkillSectionRouteRoute
  '/about': typeof AboutRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/AboutSection'
    | '/ContactSection'
    | '/ProjectSection'
    | '/SkillSection'
    | '/about'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/AboutSection'
    | '/ContactSection'
    | '/ProjectSection'
    | '/SkillSection'
    | '/about'
  id:
    | '__root__'
    | '/'
    | '/AboutSection'
    | '/ContactSection'
    | '/ProjectSection'
    | '/SkillSection'
    | '/about'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutSectionRouteRoute: typeof AboutSectionRouteRoute
  ContactSectionRouteRoute: typeof ContactSectionRouteRoute
  ProjectSectionRouteRoute: typeof ProjectSectionRouteRoute
  SkillSectionRouteRoute: typeof SkillSectionRouteRoute
  AboutRoute: typeof AboutRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/SkillSection': {
      id: '/SkillSection'
      path: '/SkillSection'
      fullPath: '/SkillSection'
      preLoaderRoute: typeof SkillSectionRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ProjectSection': {
      id: '/ProjectSection'
      path: '/ProjectSection'
      fullPath: '/ProjectSection'
      preLoaderRoute: typeof ProjectSectionRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ContactSection': {
      id: '/ContactSection'
      path: '/ContactSection'
      fullPath: '/ContactSection'
      preLoaderRoute: typeof ContactSectionRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/AboutSection': {
      id: '/AboutSection'
      path: '/AboutSection'
      fullPath: '/AboutSection'
      preLoaderRoute: typeof AboutSectionRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutSectionRouteRoute: AboutSectionRouteRoute,
  ContactSectionRouteRoute: ContactSectionRouteRoute,
  ProjectSectionRouteRoute: ProjectSectionRouteRoute,
  SkillSectionRouteRoute: SkillSectionRouteRoute,
  AboutRoute: AboutRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
